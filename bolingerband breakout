//+------------------------------------------------------------------+
//|                                                     1m alert.mq4 |
//|                      Copyright © 2009, MetaQuotes Software Corp. |
//|                                        http://www.metaquotes.net |
//+------------------------------------------------------------------+
#property copyright "ak"
#property link      "http://www.metaquotes.net"

//+------------------------------------------------------------------+
//| Input Parameters   مدخلات الاكسبيرت                                 |
//+------------------------------------------------------------------+
extern double  Lots         = 0.01 ;
extern int     StopLoss     = 1000 ;
extern int     TakeProfit   = 150 ;

 
int Slippage=5;
int i;


//+------------------------------------------------------------------+
//| Static Parameters   متغيرات عامة                                  |
//+------------------------------------------------------------------+
int            Magic        = 10;


//+------------------------------------------------------------------+
//| expert initialization function                                   |
//+------------------------------------------------------------------+
int init()
  {
//----
   
//----
   return(0);
  }
//+------------------------------------------------------------------+
//| expert deinitialization function                                 |
//+------------------------------------------------------------------+
int deinit()
  {
//----
   
//----
   return(0);
  }
//+------------------------------------------------------------------+
//| expert start function                                            |
//+------------------------------------------------------------------+
int start()
 {
/*
 if ( AccountNumber()!=534256)
  Comment( " this is not the account test ( 534256) but this is number is = ", AccountNumber());//return (0) ;     
  if ( AccountNumber()==534256)
   Comment ( "    ooo ok kkk          correct account number is   =  ", AccountNumber());
 */

//+------------------------------------------------------------------+
//|the code to close all position at the end of the day at 12 midnight 
// and this code request the sub function named (close_all_trades());                                          |
//+------------------------------------------------------------------+ 
 //if ( (Minute()==15 ||Minute()==30 ||Minute()==45 || Minute()==00 ) && Seconds () == 0) PlaySound("ok.wav");;
 
 //if (Hour()==0&& Minute()==0 && Seconds () <= 5)close_all_trades();

 /* to call the sub funcation to close all orders at a certain time for examle at 12 PM
 Note:I put also a condition for minute (Minute()<=1) because the EA will continue to close
 any position will opened untill the Hour changed more than ZERO (12 AM ),
 so the minute contion make the EA only close postion in the frist 2 minutes of the hour ZERO */
 if ( AccountProfit()>= 5 )close_all_trades();

 if (MathAbs((AccountProfit()/AccountBalance()) >= 0.25) )close_all_trades(); //close all if total losses is greater than 25% of the account balanace 
 
 // if ( (OrdersTotal () <= 2) )// to determine the total number of opened orders not more than 3 orders 
    // CalculateCurrentOrders();
 
     bool status = 1 ; // the status 1 means ON, 0 means OFF
    
      if ( status == 0 )   Comment(" Expert Status is OFF  No Sounds      Expert Status is OFF  No Sounds       Expert Status is OFF  No Sounds       Expert Status is OFF  No Sounds       Expert Status is OFF  No Sounds ");
      if (  /*Seconds () <= 3 &&*/ status ==1)
     

 
  { 
    //  CloseTicketAfter24H();
//+------------------------------------------------------------------+
//| Variables   MAIN and SIGNAL lines in stochastic for all time frams                                           |
//+------------------------------------------------------------------+
  
  double main_1m  , main_5m , main_15m , main_30m , main_1h , main_4h , main_day , main_week , main_month ;
  main_1m = iStochastic(NULL,1,5,3,3,MODE_SMA,0,MODE_MAIN,0);
  main_5m = iStochastic(NULL,5,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_15m = iStochastic(NULL,15,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_30m = iStochastic(NULL,30,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_1h = iStochastic(NULL,60,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_4h = iStochastic(NULL,240,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_day = iStochastic(NULL,1440,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_week = iStochastic(NULL,10080,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  main_month = iStochastic(NULL,43200,5,3,3,MODE_SMA,0,MODE_MAIN,0) ;
  
  double signal_1m , signal_5m , signal_15m , signal_30m , signal_1h , signal_4h , signal_day , signal_week , signal_month  ;
  signal_1m = iStochastic(NULL,1,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_5m = iStochastic(NULL,5,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_15m = iStochastic(NULL,15,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_30m = iStochastic(NULL,30,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_1h = iStochastic(NULL,60,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_4h = iStochastic(NULL,240,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_day = iStochastic(NULL,1440,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_week = iStochastic(NULL,10080,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  signal_month = iStochastic(NULL,43200,5,3,3,MODE_SMA,0,MODE_SIGNAL,0) ;
  
  
//+------------------------------------------------------------------+  
// Differance  conditions  
//+------------------------------------------------------------------+
  
double diff_1m_down , diff_5m_down , diff_15m_down , diff_30m_down , diff_1h_down , diff_4h_down , diff_day_down , diff_week_down , diff_month_down ;   
  diff_1m_down = signal_1m-main_1m ;
  diff_5m_down = signal_5m-main_5m ;
  diff_15m_down = signal_15m-main_15m ;
  diff_30m_down = signal_30m-main_30m ;
  diff_1h_down = signal_1h-main_1h ;
  diff_4h_down = signal_4h-main_4h ;
  diff_day_down = signal_day-main_day ;
  diff_week_down = signal_week-main_week ;
  diff_month_down = signal_month-main_month ;
  
double diff_1m_up , diff_5m_up , diff_15m_up , diff_30m_up , diff_1h_up , diff_4h_up , diff_day_up , diff_week_up , diff_month_up ;  
  diff_1m_up = main_1m-signal_1m ;
  diff_5m_up = main_5m-signal_5m ;
  diff_15m_up = main_15m-signal_15m ;
  diff_30m_up = main_30m-signal_30m ;
  diff_1h_up = main_1h-signal_1h ;
  diff_4h_up = main_4h-signal_4h ;
  diff_day_up = main_day-signal_day ;
  diff_week_up = main_week-signal_week ;
  diff_month_up = main_month-signal_month ;


// trend tester each hour the expert test the direction of the trend

  
//open and close price for current candle in the month,week,and day frames
double openMonthPrice = iOpen(Symbol(),PERIOD_MN1 ,0) ;// the open price of the candle 0 (the current candle)on the month frame
double openWeekPrice = iOpen(Symbol(),PERIOD_W1 ,0) ;// the open price of the candle 0 (the current candle)on the week frame
double openDayPrice = iOpen(Symbol(),PERIOD_D1 ,0) ;// the open price of the candle 0 (the current candle)on the day frame
double closeMonthPrice = iClose(Symbol(),PERIOD_MN1 ,0);// the close price of the candle 0 (the current candle)on the month frame
double closeWeekPrice = iClose(Symbol(),PERIOD_W1 ,0);// the close price of the candle 0 (the current candle)on the week frame
double closeDayPrice = iClose(Symbol(),PERIOD_D1 ,0);// the close price of the candle 0 (the current candle)on the day frame

// calculate the avarage  body of  the candle in month frame
double body0Month = MathAbs(iOpen(Symbol(),PERIOD_MN1 ,0) - iClose(Symbol(),PERIOD_MN1 ,0));
double body1Month = MathAbs(iOpen(Symbol(),PERIOD_MN1 ,1) - iClose(Symbol(),PERIOD_MN1 ,1));
double body2Month = MathAbs(iOpen(Symbol(),PERIOD_MN1 ,2) - iClose(Symbol(),PERIOD_MN1 ,2));
double body3Month = MathAbs(iOpen(Symbol(),PERIOD_MN1 ,3) - iClose(Symbol(),PERIOD_MN1 ,3));
double body4Month = MathAbs(iOpen(Symbol(),PERIOD_MN1 ,4) - iClose(Symbol(),PERIOD_MN1 ,4));
double body5Month = MathAbs(iOpen(Symbol(),PERIOD_MN1 ,5) - iClose(Symbol(),PERIOD_MN1 ,5));
double avarageBodyMonth= ( (body0Month+body1Month+body2Month+body3Month+body4Month+body5Month)/6);


// calculate the avarage  body of  the candle in week frame
double body0Week = MathAbs(iOpen(Symbol(),PERIOD_W1 ,0) - iClose(Symbol(),PERIOD_W1 ,0));
double body1Week = MathAbs(iOpen(Symbol(),PERIOD_W1 ,1) - iClose(Symbol(),PERIOD_W1 ,1));
double body2Week = MathAbs(iOpen(Symbol(),PERIOD_W1 ,2) - iClose(Symbol(),PERIOD_W1 ,2));
double body3Week = MathAbs(iOpen(Symbol(),PERIOD_W1 ,3) - iClose(Symbol(),PERIOD_W1 ,3));
double body4Week = MathAbs(iOpen(Symbol(),PERIOD_W1 ,4) - iClose(Symbol(),PERIOD_W1 ,4));
double body5Week = MathAbs(iOpen(Symbol(),PERIOD_W1 ,5) - iClose(Symbol(),PERIOD_W1 ,5));
double avarageBodyWeek= ( (body0Week+body1Week+body2Week+body3Week+body4Week+body5Week)/6);

// calculate the avarage  body of  the candle in Day frame
double body0Day = MathAbs(iOpen(Symbol(),PERIOD_D1,0) - iClose(Symbol(),PERIOD_D1,0));
double body1Day = MathAbs(iOpen(Symbol(),PERIOD_D1,1) - iClose(Symbol(),PERIOD_D1,1));
double body2Day = MathAbs(iOpen(Symbol(),PERIOD_D1,2) - iClose(Symbol(),PERIOD_D1,2));
double body3Day = MathAbs(iOpen(Symbol(),PERIOD_D1,3) - iClose(Symbol(),PERIOD_D1,3));
double body4Day = MathAbs(iOpen(Symbol(),PERIOD_D1,4) - iClose(Symbol(),PERIOD_D1,4));
double body5Day = MathAbs(iOpen(Symbol(),PERIOD_D1,5) - iClose(Symbol(),PERIOD_D1,5));
double avarageBodyDay= ( (body0Day+body1Day+body2Day+body3Day+body4Day+body5Day)/6);

//Technical analysis of the indicators


 int BandsPeriod = 20;          //Period of the Bollinger Bands
 double BandsDeviation = 2;      //Deviation of the Bollinger Bands
bool BandsBreakUp=false;
bool BandsBreakDown=false;

   double BandsTopCurr=iBands(Symbol(),0,BandsPeriod,BandsDeviation,0,PRICE_CLOSE,MODE_UPPER,0);
   double BandsLowCurr=iBands(Symbol(),0,BandsPeriod,BandsDeviation,0,PRICE_CLOSE,MODE_LOWER,0);
   
   double BandsTopPrev=iBands(Symbol(),0,BandsPeriod,BandsDeviation,0,PRICE_CLOSE,MODE_UPPER,1);
   double BandsLowPrev=iBands(Symbol(),0,BandsPeriod,BandsDeviation,0,PRICE_CLOSE,MODE_LOWER,1);
   
   string chart ;
   
   if (Period()== 1)
          chart = " on 1 min "; 
      else if (Period()== 5)
          chart = " on 5 min "; 
      if (Period()== 15)
          chart = " on 15 min "; 
        

   
   if( Close[1]>Open[1] && Close[1]>BandsTopCurr && Open[0]> BandsTopCurr) Alert ( Symbol(),chart," BandsBreakUp ");
   if( Open[1]>Close[1] && Close[1]<BandsLowCurr && Open[0]< BandsLowCurr) Alert ( Symbol(),chart," BandsBreakDown " );
 // Alert ( Symbol(),chart, Close[1], Open[1],BandsTopCurr,BandsLowCurr );
   
   
  //  if (BandsBreakUp=true ) Alert ( Symbol()," BandsBreakUp ") ;

   // if (BandsBreakDown=false )Alert ( Symbol()," BandsBreakDown " );



 
   return(0);
  }
  }
  
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
// a SUB program or sub funcation to Close all orders at a certain time   
//+------------------------------------------------------------------+

void close_all_trades()
{
    for(i=OrdersTotal()-1;i>=0;i--)
       {
       OrderSelect(i, SELECT_BY_POS);
       int type   = OrderType();
               
       bool result = false;
              
       switch(type)
          {
          //Close opened long positions
          case OP_BUY  : result = OrderClose(OrderTicket(),OrderLots(),MarketInfo(OrderSymbol(),MODE_BID),Slippage,Pink);
                         break;
               
          //Close opened short positions
          case OP_SELL : result = OrderClose(OrderTicket(),OrderLots(),MarketInfo(OrderSymbol(),MODE_ASK),Slippage,Pink);
                         break;
          //Close pending orders
            case OP_BUYLIMIT  :
            case OP_BUYSTOP   :
            case OP_SELLLIMIT :
            case OP_SELLSTOP  : result = OrderDelete( OrderTicket() );                
          }
          
       if(result == false)
          {
            Sleep(3000);
          }  
       }
      Print ("Account Profit Reached. All Open & Pending Trades Have Been Closed");
      
      
      return(0);
   }  
   

//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//| Calculate the number of all opened positions                                         |
//+------------------------------------------------------------------+
int CalculateCurrentOrders()
  {
   int buys=0,sells=0, totalOrders =0;
//---
   for(int j=0;j<OrdersTotal();j++)
     {
      if(OrderSelect(j,SELECT_BY_POS,MODE_TRADES)==false) break; // if false it means that there is no opened positions so do break
     // if(OrderSymbol()==Symbol() ) //&& OrderMagicNumber()== Magic 
        {
         if(OrderType()==OP_BUY)  buys++;
         if(OrderType()==OP_SELL) sells++;
             totalOrders = buys + sells;
        }
     }
//--- return orders volume
  
   Alert ( Symbol() ," totalOrders ", totalOrders ," buyes number =", buys, " selles number = ", sells);
   
  }
  

//+------------------------------------------------------------------+
//| make a Sell order if there is no opened sell positions for this symbol                                         |
//+------------------------------------------------------------------+
int MakeSellOrder(string acomment)
  {
   int buys=0,sells=0;
   
//---
   for(int j=0;j<OrdersTotal();j++)
     {
      if(OrderSelect(j,SELECT_BY_POS,MODE_TRADES)==false) break; // if false it means that there is no opened positions so do break
      if(OrderSymbol()==Symbol() ) //&& OrderMagicNumber()== Magic
        {
         if(OrderType()==OP_BUY)  buys++;
         if(OrderType()==OP_SELL) sells++;
        }
     }
//--- return orders volume
   if (sells ==0)
   OrderSend(Symbol(),OP_SELL,Lots,Bid, 0, Bid+StopLoss*Point, Bid-TakeProfit*Point," LetsFX Lesson1 "+acomment , Magic, 0,LightPink); 
 
  }
  
//+------------------------------------------------------------------+
//| check the opened positions and if position was opened more than 24 hours or more then close it or modify it                                        |
//+------------------------------------------------------------------+
int CloseTicketAfter24H()
  {
//---
   for(int j=0;j<OrdersTotal();j++)
     {
      if(OrderSelect(j,SELECT_BY_POS,MODE_TRADES)==false) break; // if false it means that there is no opened positions so do break
 //    Alert (OrderSymbol(), "  order open time is ", OrderOpenTime()) ; // OrderOpenTime() is the open time in the format 2019.01.11 15:36:06 
 //    Alert (OrderSymbol(), " Server time TimeCurrent() is   ", TimeCurrent() )  ;  // TimeCurrent() is the Sever Time in the format 2019.01.11 15:36:06
 //     Alert (OrderSymbol(), "  computer Local time is   ", LocalTime() )  ;  // LocalTime() is the computer Local time in the format 2019.01.11 15:36:06
  //   Alert("TimeCurrent=",TimeToStr(TimeCurrent(),TIME_SECONDS ));
  //   Alert (OrderSymbol(),  TimeToStr(TimeCurrent(),TIME_SECONDS) , TimeToStr(OrderOpenTime(),TIME_SECONDS)   )  ;
 //  Alert (OrderSymbol(), " minutes difference() is    ",   TimeMinute(TimeCurrent())-  TimeMinute(OrderOpenTime() )  )  ;
    
    
    int hourTimeDifference = TimeHour( TimeCurrent()) -  TimeHour( OrderOpenTime() ) ; //compare the hours difference in the TimeCurrent and OrderOpenTime dates 
    int daysTimeDifference = TimeDay(TimeCurrent()) -  TimeDay(OrderOpenTime()); //compare the days difference in the TimeCurrent and OrderOpenTime dates 
  
 

  if ( hourTimeDifference  >= 22  || hourTimeDifference < 0 && TimeDay(TimeCurrent())> TimeDay(OrderOpenTime())  ) // less than 0 means that this day was yeasterday or past days more
  {
  Alert (OrderSymbol(), "  hours difference() is    ",  hourTimeDifference  )  ;
  OrderClose(OrderTicket(),OrderLots(),MarketInfo(OrderSymbol(),MODE_ASK),Slippage,Pink); 
  }

  if (daysTimeDifference >1 || daysTimeDifference < 0 && TimeYear(TimeCurrent())> TimeYear(OrderOpenTime())  ) //  less than 0 means that this day was in the last month or last year
  { Alert (OrderSymbol(), "  days difference() is    ",   daysTimeDifference  )  ;
  OrderClose(OrderTicket(),OrderLots(),MarketInfo(OrderSymbol(),MODE_ASK),0,Pink); 
  }
 
     
     }
//--- return orders volume
   

  }
